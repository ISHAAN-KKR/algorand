#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "totalVotes" "votersCount" "ideaCount"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:5
    // ideaCount = GlobalState<uint64>({ initialValue: 0 })
    bytec_2 // "ideaCount"
    intc_0 // 0
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalVotes = GlobalState<uint64>({ initialValue: 0 })
    bytec_0 // "totalVotes"
    intc_0 // 0
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:7
    // votersCount = GlobalState<uint64>({ initialValue: 0 })
    bytec_1 // "votersCount"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class IdeaVotingApp extends Contract {
    txn NumAppArgs
    bz main_bare_routing@11
    pushbytess 0x662d149d 0x3e65877d 0x58057560 0xdb47e418 // method "addIdea()void", method "vote()void", method "getWinner()uint64", method "distributeReward()void"
    txna ApplicationArgs 0
    match main_addIdea_route@5 main_vote_route@6 main_getWinner_route@7 main_distributeReward_route@8

main_after_if_else@15:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class IdeaVotingApp extends Contract {
    intc_0 // 0
    return

main_distributeReward_route@8:
    // smart_contracts/hello_world/contract.algo.ts:24
    // distributeReward(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub distributeReward
    intc_1 // 1
    return

main_getWinner_route@7:
    // smart_contracts/hello_world/contract.algo.ts:20
    // getWinner(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub getWinner
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_vote_route@6:
    // smart_contracts/hello_world/contract.algo.ts:15
    // vote(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub vote
    intc_1 // 1
    return

main_addIdea_route@5:
    // smart_contracts/hello_world/contract.algo.ts:11
    // addIdea(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub addIdea
    intc_1 // 1
    return

main_bare_routing@11:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class IdeaVotingApp extends Contract {
    txn OnCompletion
    bnz main_after_if_else@15
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::IdeaVotingApp.addIdea() -> void:
addIdea:
    // smart_contracts/hello_world/contract.algo.ts:5
    // ideaCount = GlobalState<uint64>({ initialValue: 0 })
    intc_0 // 0
    bytec_2 // "ideaCount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:12
    // this.ideaCount.value += 1
    intc_1 // 1
    +
    // smart_contracts/hello_world/contract.algo.ts:5
    // ideaCount = GlobalState<uint64>({ initialValue: 0 })
    bytec_2 // "ideaCount"
    // smart_contracts/hello_world/contract.algo.ts:12
    // this.ideaCount.value += 1
    swap
    app_global_put
    retsub


// smart_contracts/hello_world/contract.algo.ts::IdeaVotingApp.vote() -> void:
vote:
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalVotes = GlobalState<uint64>({ initialValue: 0 })
    intc_0 // 0
    bytec_0 // "totalVotes"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:16
    // this.totalVotes.value += 1
    intc_1 // 1
    +
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalVotes = GlobalState<uint64>({ initialValue: 0 })
    bytec_0 // "totalVotes"
    // smart_contracts/hello_world/contract.algo.ts:16
    // this.totalVotes.value += 1
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:7
    // votersCount = GlobalState<uint64>({ initialValue: 0 })
    intc_0 // 0
    bytec_1 // "votersCount"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:17
    // this.votersCount.value += 1
    intc_1 // 1
    +
    // smart_contracts/hello_world/contract.algo.ts:7
    // votersCount = GlobalState<uint64>({ initialValue: 0 })
    bytec_1 // "votersCount"
    // smart_contracts/hello_world/contract.algo.ts:17
    // this.votersCount.value += 1
    swap
    app_global_put
    retsub


// smart_contracts/hello_world/contract.algo.ts::IdeaVotingApp.getWinner() -> uint64:
getWinner:
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalVotes = GlobalState<uint64>({ initialValue: 0 })
    intc_0 // 0
    bytec_0 // "totalVotes"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:21
    // return this.totalVotes.value
    retsub


// smart_contracts/hello_world/contract.algo.ts::IdeaVotingApp.distributeReward() -> void:
distributeReward:
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalVotes = GlobalState<uint64>({ initialValue: 0 })
    bytec_0 // "totalVotes"
    // smart_contracts/hello_world/contract.algo.ts:25
    // this.totalVotes.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:7
    // votersCount = GlobalState<uint64>({ initialValue: 0 })
    bytec_1 // "votersCount"
    // smart_contracts/hello_world/contract.algo.ts:26
    // this.votersCount.value = 0
    intc_0 // 0
    app_global_put
    retsub
